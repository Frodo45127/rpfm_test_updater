name: Rust

on:
  push:
    tags:
      - v*.*.*

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust:
          - stable

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}

      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: actions/cache@v2
        with:
          path: |
            D:\Craft
          key: ${{ runner.os }}-Craft-Install

    #  - name: Installing Qt5 & KTextEditor on Windows
    #    if: startsWith(matrix.os, 'windows') && steps.cache.outputs.cache-hit != 'true'
    #
    #    run: |
    #      $scriptPath = ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/Frodo45127/craft/master/setup/install_craft.ps1'))
    #      Invoke-Command -ScriptBlock ([scriptblock]::Create($scriptPath)) -ArgumentList "D:\Craft"
    #      D:\Craft\craft\craftenv.ps1
    #      craft -i --ci-mode ktexteditor
    #    shell: pwsh

      - name: Build on Windows
        if: startsWith(matrix.os, 'windows')

        run: |
          #D:\Craft\craft\craftenv.ps1
          cd D:/a/rpfm_test_updater/rpfm_test_updater
          #cargo build --bin rpfm_cli
        shell: pwsh

      - name: Prepare Assets for Release
        if: startsWith(matrix.os, 'windows')

        run: |
          cd D:\
          mkdir deploy
          cd deploy
          mkdir win
          cd win
          curl -L -o rpfm-release-assets-windows-x64.zip https://www.dropbox.com/s/2ko2ssvgxjhb9kt/rpfm-release-assets-windows-x64.zip?dl=0
          7z x rpfm-release-assets-windows-x64.zip
          #cp D:/a/rpfm_test_updater/rpfm_test_updater/target/release/rpfm_ui.exe D:\deploy\win\rpfm-release-assets
          #cp D:/a/rpfm_test_updater/rpfm_test_updater/target/debug/rpfm_cli.exe D:\deploy\win\rpfm-release-assets
          #cp D:/a/rpfm_test_updater/rpfm_test_updater/target/release/rpfm_ui.pdb D:\deploy\win\rpfm-release-assets
          #cp D:/a/rpfm_test_updater/rpfm_test_updater/target/debug/rpfm_cli.pdb D:\deploy\win\rpfm-release-assets
          cp D:/a/rpfm_test_updater/rpfm_test_updater/img/* D:\deploy\win\rpfm-release-assets\img\
          cp D:/a/rpfm_test_updater/rpfm_test_updater/locale/* D:\deploy\win\rpfm-release-assets\locale\
          cd rpfm-release-assets
          7z a rpfm-${{ env.RELEASE_VERSION }}-x86_64-pc-windows-msvc.zip .\**

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: true

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: D:/deploy/win/rpfm-release-assets/rpfm-v${{ steps.get_version.outputs.VERSION }}-x86_64-pc-windows-msvc.zip
          asset_name: rpfm-${{ env.RELEASE_VERSION }}-x86_64-pc-windows-msvc.zip
          asset_content_type: application/x-zip-compressed
